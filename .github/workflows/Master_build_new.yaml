name: Build NephroPath PDF for Windows and macOS

on:
  push:
    branches: [main]
    paths-ignore:
      - 'NephroPath.exe'
      - 'NephroPath_mac'
      - '**.md'
      - '.github/**'  # Prevent loops from workflow edits

concurrency:
  group: build-${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: false

permissions:
  contents: write
  id-token: write

jobs:
  build-windows:
    runs-on: windows-2022
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
          cache: 'pip'
          cache-dependency-path: 'Dependencies/requirements.txt'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r Dependencies/requirements.txt
          pip install reportlab pyinstaller qrcode

      - name: Verify required files exist
        shell: pwsh
        run: |
          $requiredFiles = @(
            "Code/CKD_core.py",
            "Code/CKD_pdf_files_new.py",
            "Code/CKD_Master_pdf_exefree.py",
            "Dependencies/version_info.txt",
            "Dependencies/NephroPath_installer_icon.ico",
            "EMIS_Files/Creatinine.csv",
            "EMIS_Files/CKD_check.csv",
            "Dependencies/contraindicated_drugs.csv",
            "Dependencies/drug_adjustment.csv",
            "Dependencies/statins.csv",
            "Dependencies/diabetes_meds.csv",
            "Dependencies/sglt2_inhibitors.csv",
            "Dependencies/surgery_information.csv"
          )
          foreach ($file in $requiredFiles) {
            if (-Not (Test-Path $file)) {
              Write-Error "Missing required file: $file"
              exit 1
            } else {
              Write-Host "Found: $file"
            }
          }

      - name: Build with PyInstaller (Windows)
        shell: pwsh
        run: |
          $env:EMIS_FILES_PATH = "$(Get-Location)\EMIS_Files"
          $env:DEPENDENCIES_PATH = "$(Get-Location)\Dependencies"
          
          python -m PyInstaller --onefile `
          --name="NephroPath" `
          --icon="Dependencies/NephroPath_installer_icon.ico" `
          --version-file="Dependencies/version_info.txt" `
          --add-data="Code/CKD_core.py;." `
          --add-data="Code/CKD_pdf_files_new.py;." `
          --add-data="Dependencies;Dependencies" `
          --add-data="EMIS_Files;EMIS_Files" `
          --hidden-import="CKD_pdf_files_new" `
          --hidden-import="CKD_core" `
          "Code/CKD_Master_pdf_exefree.py"

      - name: Move release
        shell: pwsh
        run: |
          if (-not (Test-Path "dist\NephroPath.exe")) {
            Write-Error "dist\NephroPath.exe not found. PyInstaller build may have failed."
            exit 1
          }
          Move-Item dist\NephroPath.exe .\NephroPath.exe -Force

      - name: Test NephroPath.exe
        shell: pwsh
        run: |
          $env:EMIS_FILES_PATH = "$(Get-Location)\EMIS_Files"
          $env:DEPENDENCIES_PATH = "$(Get-Location)\Dependencies"

          Write-Host "Testing NephroPath.exe with environment variables:"
          Write-Host "EMIS_FILES_PATH: $env:EMIS_FILES_PATH"
          Write-Host "DEPENDENCIES_PATH: $env:DEPENDENCIES_PATH"
          
          # Test that the executable can start and show help/version without processing data
          $testResult = Start-Process -FilePath ".\NephroPath.exe" -ArgumentList "--help" -Wait -PassThru -NoNewWindow -ErrorAction SilentlyContinue
          
          if ($testResult.ExitCode -eq 0) {
            Write-Host "NephroPath.exe help command ran successfully"
          } else {
            Write-Host "Help command failed, trying version check..."
            $versionResult = Start-Process -FilePath ".\NephroPath.exe" -ArgumentList "--version" -Wait -PassThru -NoNewWindow -ErrorAction SilentlyContinue
            
            if ($versionResult.ExitCode -eq 0) {
              Write-Host "NephroPath.exe version command ran successfully"
            } else {
              Write-Host "Both help and version failed, executable may have basic issues"
              Write-Host "Exit codes: help=$($testResult.ExitCode), version=$($versionResult.ExitCode)"
              # Don't fail the build for now - executable may still work in production
              Write-Warning "NephroPath.exe test commands failed but continuing build"
            }
          }

      - name: Commit and push changes (Windows artifact)
        shell: bash
        run: |
          set -e
          git config --global user.email "actions@github.com"
          git config --global user.name "GitHub Actions"
          git config --global --add safe.directory "$GITHUB_WORKSPACE"

          git add -f NephroPath.exe

          if git diff --staged --quiet; then
            echo "No changes to NephroPath.exe, skipping commit."
            exit 0
          fi

          # Retry push up to 5 times with backoff
          for i in $(seq 1 5); do
            echo "Attempt $i to push changes..."
            git fetch origin main
            if git rebase origin/main; then
              echo "Rebase successful."
            else
              echo "Rebase failed, aborting and retrying..."
              git rebase --abort || true
              sleep $((i * 2))
              continue
            fi

            git commit -m "Update built NephroPath.exe [skip ci]" || {
              echo "No changes to commit after rebase."
              exit 0
            }

            if git push origin HEAD:main; then
              echo "Push successful on attempt $i"
              exit 0
            else
              echo "Push failed on attempt $i, retrying..."
              sleep $((i * 2))
            fi
          done

          echo "Failed to push after 5 attempts."
          exit 1

      - name: Upload Windows executable
        uses: actions/upload-artifact@v4
        with:
          name: NephroPath-Windows
          path: NephroPath.exe

  build-macos:
    runs-on: macos-13
    needs: build-windows
    if: success()
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: main

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
          cache: 'pip'
          cache-dependency-path: 'Dependencies/requirements.txt'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r Dependencies/requirements.txt
          pip install reportlab pyinstaller qrcode

      - name: Verify required files exist
        run: |
          required_files=(
            "Code/CKD_core.py"
            "Code/CKD_pdf_files_new.py"
            "Code/CKD_Master_pdf_exefree.py"
            "Dependencies/NephroPath_installer_icon.icns"
            "EMIS_Files/Creatinine.csv"
            "EMIS_Files/CKD_check.csv"
            "Dependencies/contraindicated_drugs.csv"
            "Dependencies/drug_adjustment.csv"
            "Dependencies/statins.csv"
            "Dependencies/diabetes_meds.csv"
            "Dependencies/sglt2_inhibitors.csv"
            "Dependencies/surgery_information.csv"
          )
          for file in "${required_files[@]}"; do
            if [ ! -f "$file" ]; then
              echo "Error: Missing required file: $file" >&2
              exit 1
            else
              echo "Found: $file"
            fi
          done

      - name: Build with PyInstaller (macOS)
        run: |
          export EMIS_FILES_PATH="$(pwd)/EMIS_Files"
          export DEPENDENCIES_PATH="$(pwd)/Dependencies"

          python -m PyInstaller --onefile \
            --name=NephroPath_mac \
            --icon="Dependencies/NephroPath_installer_icon.icns" \
            --add-data "Code/CKD_core.py:." \
            --add-data "Code/CKD_pdf_files_new.py:." \
            --add-data "Dependencies:Dependencies" \
            --add-data "EMIS_Files:EMIS_Files" \
            --hidden-import CKD_pdf_files_new \
            --hidden-import CKD_core \
            Code/CKD_Master_pdf_exefree.py

      - name: Move release
        run: |
          if [ ! -f "dist/NephroPath_mac" ]; then
            echo "Error: dist/NephroPath_mac not found. PyInstaller build may have failed." >&2
            exit 1
          fi
          mv dist/NephroPath_mac ./NephroPath_mac

      - name: Test NephroPath_mac
        run: |
          export EMIS_FILES_PATH="$(pwd)/EMIS_Files"
          export DEPENDENCIES_PATH="$(pwd)/Dependencies"

          echo "Testing NephroPath_mac with environment variables:"
          echo "EMIS_FILES_PATH: $EMIS_FILES_PATH"
          echo "DEPENDENCIES_PATH: $DEPENDENCIES_PATH"
          
          # Test that the executable can start and show help/version without processing data
          if ./NephroPath_mac --help 2>/dev/null; then
            echo "NephroPath_mac help command ran successfully"
          elif ./NephroPath_mac --version 2>/dev/null; then
            echo "NephroPath_mac version command ran successfully"
          else
            echo "Help and version commands failed, but executable may still work in production"
            echo "Continuing build..."
          fi

      - name: Commit and push changes (macOS artifact)
        shell: bash
        run: |
          set -e
          git config --global user.email "actions@github.com"
          git config --global user.name "GitHub Actions"
          git config --global --add safe.directory "$GITHUB_WORKSPACE"

          git add -f NephroPath_mac

          if git diff --staged --quiet; then
            echo "No changes to NephroPath_mac, skipping commit."
            exit 0
          fi

          for i in $(seq 1 5); do
            echo "Attempt $i to push changes..."
            git fetch origin main
            if git rebase origin/main; then
              echo "Rebase successful."
            else
              echo "Rebase failed, aborting and retrying..."
              git rebase --abort || true
              sleep $((i * 2))
              continue
            fi

            git commit -m "Update built NephroPath_mac [skip ci]" || {
              echo "No changes to commit after rebase."
              exit 0
            }

            if git push origin HEAD:main; then
              echo "Push successful on attempt $i"
              exit 0
            else
              echo "Push failed on attempt $i, retrying..."
              sleep $((i * 2))
            fi
          done

          echo "Failed to push after 5 attempts."
          exit 1

      - name: Upload macOS executable
        uses: actions/upload-artifact@v4
        with:
          name: NephroPath_mac-macOS
          path: NephroPath_mac
