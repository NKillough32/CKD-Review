import pandas as pd
import os
import warnings
import logging
import sys
from datetime import datetime
import shutil

# Setup logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[logging.StreamHandler()]
)

warnings.filterwarnings("ignore", category=pd.errors.SettingWithCopyWarning)

# Get the base path (works for both script and executable)
if getattr(sys, 'frozen', False):
    base_path = sys._MEIPASS
    # Use the current working directory for saving output files
    working_base_path = os.getcwd()
else:
    base_path = os.getcwd()
    working_base_path = base_path

# Add this after the base_path definition
emis_path = os.path.join(os.getcwd(), "EMIS_Files")  # Always use local EMIS_Files directory

# Execute the main CKD processing logic
print("Starting CKD Data Analysis Pipeline....")
# Determine the path to CKD_core.py based on execution mode
ckd_core_path = os.path.join(base_path, "CKD_core.py" if getattr(sys, 'frozen', False) else os.path.join("Code", "CKD_core.py"))

try:
    exec(open(ckd_core_path).read())
except FileNotFoundError:
    logging.error(f"CKD_core.py not found at {ckd_core_path}. Ensure itâ€™s included in the build.")
    sys.exit(1)

if 'CKD_review' not in globals():
    logging.error("CKD_review not generated by CKD_core. Exiting.")
    sys.exit(1)

# Log the contents of working_base_path to confirm file generation by CKD_core.py
logging.info(f"Contents of working directory ({working_base_path}) after CKD_core.py execution:")
try:
    working_dir_contents = os.listdir(working_base_path)
    logging.info(f"Files/folders: {working_dir_contents}")
except Exception as e:
    logging.error(f"Failed to list contents of working directory: {e}")

# Import the PDF generation logic
from CKD_pdf_files_new import generate_patient_pdf

print("Preprocessing data and performing CKD metrics calculations...")
print("Data preprocessing and metrics calculation complete.")
print("Writing Output Data and generating PDFs...")

# Generate patient PDFs
logging.info("Generating patient PDFs...")
date_folder = generate_patient_pdf(CKD_review)  # type: ignore
logging.info(f"date_folder returned by generate_patient_pdf: {date_folder}")
if not date_folder or not os.path.isdir(date_folder):
    logging.error(f"Invalid date_folder: {date_folder}. Patient summary folder not created.")
    sys.exit(1)

# Save output to CSV
output_file_name = os.path.join(working_base_path, f"eGFR_check_{pd.Timestamp.today().date()}.csv")
CKD_review.to_csv(output_file_name, index=False)  # type: ignore
logging.info(f"Saved output to {output_file_name}")
if not os.path.exists(output_file_name):
    logging.error(f"Failed to confirm existence of {output_file_name} after saving")

# Function to move files to the date-stamped folder
def move_ckd_files(date_folder):
    logging.info(f"Moving CKD files to {date_folder}")
    if not os.path.isdir(date_folder):
        logging.error(f"Cannot move files: {date_folder} is not a valid directory")
        return

    # CKD stage and ACR grade codes for EMIS grouping
    def get_ckd_stage_acr_group(row):
        eGFR = row['eGFR']
        ACR = row['ACR']

        if pd.isna(eGFR) or pd.isna(ACR):
            return "No Data"

        if eGFR >= 90:
            if ACR < 3: return "Normal Function"
            elif ACR <= 30: return "Stage 1 A2"
            else: return "Stage 1 A3"
        elif eGFR >= 60:
            if ACR < 3: return "Normal Function"
            elif ACR <= 30: return "Stage 2 A2"
            else: return "Stage 2 A3"
        elif eGFR >= 45:
            if ACR < 3: return "Stage 3A A1"
            elif ACR <= 30: return "Stage 3A A2"
            else: return "Stage 3A A3"
        elif eGFR >= 30:
            if ACR < 3: return "Stage 3B A1"
            elif ACR <= 30: return "Stage 3B A2"
            else: return "Stage 3B A3"
        elif eGFR >= 15:
            if ACR < 3: return "Stage 4 A1"
            elif ACR <= 30: return "Stage 4 A2"
            else: return "Stage 4 A3"
        elif 0 < eGFR < 15:
            if ACR < 3: return "Stage 5 A1"
            elif ACR <= 30: return "Stage 5 A2"
            else: return "Stage 5 A3"
        else:
            return "No Data"

    # Apply CKD grouping
    CKD_review['CKD_Group'] = CKD_review.apply(get_ckd_stage_acr_group, axis=1)  # type: ignore

    # Save EMIS batch files
    emis_dir = os.path.join(working_base_path, "EMIS_Clinical_Code_Batch_Files")
    os.makedirs(emis_dir, exist_ok=True)
    logging.info(f"Created EMIS batch files directory: {emis_dir}")
    for group in CKD_review['CKD_Group'].unique():  # type: ignore
        filtered_patients = CKD_review[CKD_review['CKD_Group'] == group][["HC_Number"]].copy()  # type: ignore
        filtered_patients.rename(columns={'HC_Number': 'HCN'}, inplace=True)
        group_file_name = f"CKD_{group.replace(' ', '_').replace('-', '_')}_Patients.txt"
        group_file_path = os.path.join(emis_dir, group_file_name)
        filtered_patients.to_csv(group_file_path, index=False, sep='\t', header=False)
        logging.info(f"Saved {group} patients to: {group_file_path}")
        if not os.path.exists(group_file_path):
            logging.error(f"Failed to confirm existence of {group_file_path} after saving")

    # Save additional CSV
    output_file_name2 = os.path.join(working_base_path, f"data_check_{pd.Timestamp.today().date()}.csv")
    CKD_review.to_csv(output_file_name2, index=False)  # type: ignore
    logging.info(f"Saved output to {output_file_name2}")
    if not os.path.exists(output_file_name2):
        logging.error(f"Failed to confirm existence of {output_file_name2} after saving")

    # Construct file names based on today's date
    egfr_file = f"eGFR_check_{pd.Timestamp.today().date()}.csv"
    data_file = f"data_check_{pd.Timestamp.today().date()}.csv"
    ckd_review_file = "CKD_review.csv"
    missing_KFRE_file = "missing_data_subjects.csv"

    # Construct source and destination paths
    egfr_source = os.path.join(working_base_path, egfr_file)
    egfr_destination = os.path.join(date_folder, egfr_file)
    
    data_source = os.path.join(working_base_path, data_file)
    data_destination = os.path.join(date_folder, data_file)
    
    ckd_source = os.path.join(working_base_path, ckd_review_file)
    ckd_destination = os.path.join(date_folder, ckd_review_file)

    missing_source = os.path.join(working_base_path, missing_KFRE_file)
    missing_destination = os.path.join(date_folder, missing_KFRE_file)

    # Log the existence of each source file
    logging.info(f"Checking for source files in {working_base_path}:")
    for src, name in [
        (egfr_source, egfr_file),
        (data_source, data_file),
        (ckd_source, ckd_review_file),
        (missing_source, missing_KFRE_file)
    ]:
        if os.path.exists(src):
            logging.info(f"Found {name} at {src}")
        else:
            logging.warning(f"{name} not found at {src}")

    # Move files with error handling
    for src, dst, name in [
        (data_source, data_destination, data_file),
        (egfr_source, egfr_destination, egfr_file),
        (ckd_source, ckd_destination, ckd_review_file),
        (missing_source, missing_destination, missing_KFRE_file)
    ]:
        try:
            if os.path.exists(src):
                # Check if destination already exists and remove it to avoid conflicts
                if os.path.exists(dst):
                    if os.path.isfile(dst):
                        os.remove(dst)
                        logging.info(f"Removed existing file at {dst} to allow move")
                    else:
                        shutil.rmtree(dst)
                        logging.info(f"Removed existing directory at {dst} to allow move")
                shutil.move(src, dst)
                logging.info(f"Moved {name} to {dst}")
            else:
                logging.warning(f"Source file {src} does not exist, skipping")
        except Exception as e:
            logging.error(f"Failed to move {name} from {src} to {dst}: {e}")

    # Move the EMIS_Clinical_Code_Batch_Files folder
    emis_source = os.path.join(working_base_path, "EMIS_Clinical_Code_Batch_Files")
    emis_destination = os.path.join(date_folder, "EMIS_Clinical_Code_Batch_Files")
    try:
        if os.path.exists(emis_source):
            # Log the contents of the EMIS folder for debugging
            emis_contents = os.listdir(emis_source)
            logging.info(f"Contents of EMIS_Clinical_Code_Batch_Files: {emis_contents}")
            # Check if destination already exists and remove it to avoid conflicts
            if os.path.exists(emis_destination):
                shutil.rmtree(emis_destination)
                logging.info(f"Removed existing directory at {emis_destination} to allow move")
            shutil.move(emis_source, emis_destination)
            logging.info(f"Moved EMIS_Clinical_Code_Batch_Files to {emis_destination}")
        else:
            logging.warning(f"EMIS_Clinical_Code_Batch_Files folder not found at {emis_source}, skipping")
    except Exception as e:
        logging.error(f"Failed to move EMIS_Clinical_Code_Batch_Files from {emis_source} to {emis_destination}: {e}")

# Folder renaming function
def rename_folders(date_folder):
    logging.info(f"Renaming folders in {date_folder}")
    folder_mapping = {
        "Review_Required__CKD_Stage_1_2_with__1_year_since_last_eGFR_or_ACR__3_": "Stages_1-2_(12_Months_Review)",
        "No_immediate_review_required": "No_Immediate_Review",
        "Review_Required__CKD_Stage_3_5_with__6_months_since_last_eGFR__ACR__30__or_high_risk_": "Stages_3-5_(6_Months_Review)",
        "Review_Required__CKD_Stage_3_5_with__3_months_since_last_eGFR": "Stages_3-5_(3_Months_Review)",
        "Normal_Renal_Function": "Normal_Renal_Function",
        "Review_Required__eGFR_date_unavailable_": "Review_eGFR_Date_Unavailable"
    }
    if not os.path.isdir(date_folder):
        logging.warning(f"Date folder not found: {date_folder}")
        return
    for original_name, new_name in folder_mapping.items():
        for folder in os.listdir(date_folder):
            if original_name in folder:
                original_path = os.path.join(date_folder, folder)
                new_path = os.path.join(date_folder, new_name)
                try:
                    os.rename(original_path, new_path)
                    logging.info(f"Renamed folder '{folder}' to '{new_name}'")
                except Exception as e:
                    logging.error(f"Failed to rename folder '{folder}' to '{new_name}': {e}")

# File deletion function
def delete_ckd_files(date_folder):
    logging.info(f"Deleting CKD files in {date_folder}")
    files_to_delete = [
        os.path.join(date_folder, f"eGFR_check_{pd.Timestamp.today().date()}.csv"),
        os.path.join(date_folder, "CKD_review.csv")
    ]
    for file_path in files_to_delete:
        try:
            if os.path.exists(file_path):
                os.remove(file_path)
                logging.info(f"Deleted {file_path}")
            else:
                logging.warning(f"File not found for deletion: {file_path}")
        except Exception as e:
            logging.error(f"Error deleting {file_path}: {e}")

# Execute the pipeline
move_ckd_files(date_folder)
rename_folders(date_folder)
delete_ckd_files(date_folder)

# Log the contents of date_folder for debugging
logging.info(f"Contents of date_folder ({date_folder}) after pipeline execution:")
try:
    date_folder_contents = os.listdir(date_folder)
    logging.info(f"Files/folders: {date_folder_contents}")
except Exception as e:
    logging.error(f"Failed to list contents of date_folder: {e}")

logging.info("\nCKD Analysis and Reporting Completed")
logging.info(f"All reports and data saved in the folder: {date_folder}")
logging.info("Please review missing file alerts above if applicable.\n")