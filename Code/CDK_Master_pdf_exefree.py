import pandas as pd  # type: ignore
import os
import warnings
from datetime import datetime
import shutil

# Setup logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[logging.StreamHandler()]
)

warnings.filterwarnings("ignore", category=pd.errors.SettingWithCopyWarning)

# Get the current working directory
current_dir = os.getcwd()

# Import the main CKD processing logic
from CKD_core import *

# Import the PDF generation logic
from CKD_pdf_files import generate_patient_pdf

print("Starting CKD Data Analysis Pipeline....")

# Run CKD_core to process data and generate CKD_review
# This assumes CKD_core sets up CKD_review as a global or returns it
exec(open(os.path.join(current_dir, "CKD_core.py")).read())  # Dynamically execute CKD_core
# Assuming CKD_review is now available from CKD_core

if 'CKD_review' not in globals():
    logging.error("CKD_review not generated by CKD_core. Exiting.")
    sys.exit(1)

print("Preprocessing data and performing CKD metrics calculations...")
print("Data preprocessing and metrics calculation complete.")
print("Writing Output Data and generating PDFs...")

# Generate patient PDFs using CKD_pdf_files
date_folder = generate_patient_pdf(CKD_review)

# Save output to CSV (as in CKD_core)
output_file_name = f"eGFR_check_{pd.Timestamp.today().date()}.csv"
CKD_review.to_csv(output_file_name, index=False)
logging.info(f"Saved output to {output_file_name}")

# Function to move both the eGFR file and CKD_review file to the date-stamped folder
def move_ckd_files(date_folder):
    # Construct file names based on today's date
    egfr_file = f"eGFR_check_{pd.Timestamp.today().date()}.csv"
    data_file = f"data_check_{pd.Timestamp.today().date()}.csv"
    ckd_review_file = "CKD_review.csv"  # Static filename for CKD_review
    missing_KFRE_file = "missing_data_subjects.csv"

    # Construct source and destination paths for both files
    egfr_source = os.path.join(current_dir, egfr_file)
    egfr_destination = os.path.join(date_folder, egfr_file)
    
    data_source = os.path.join(current_dir, data_file)
    data_destination = os.path.join(date_folder, data_file)
    
    ckd_source = os.path.join(current_dir, ckd_review_file)
    ckd_destination = os.path.join(date_folder, ckd_review_file)

    missing_source = os.path.join(current_dir, missing_KFRE_file)
    missing_destination = os.path.join(date_folder, missing_KFRE_file)

    # Move the data file
    try:
        shutil.move(data_source, data_destination)
        logging.info(f"Moved {data_file} to {date_folder}")
    except Exception as e:
        logging.error(f"Failed to move {data_file}: {e}")

    # Move the eGFR file
    try:
        shutil.move(egfr_source, egfr_destination)
        logging.info(f"Moved {egfr_file} to {date_folder}")
    except Exception as e:
        logging.error(f"Failed to move {egfr_file}: {e}")
    
    # Move the CKD_review file
    try:
        shutil.move(ckd_source, ckd_destination)
        logging.info(f"Moved {ckd_review_file} to {date_folder}")
    except Exception as e:
        logging.error(f"Failed to move {ckd_review_file}: {e}")

    # Move the missing_KFRE file
    try:
        shutil.move(missing_source, missing_destination)
        logging.info(f"Moved {missing_KFRE_file} to {date_folder}")
    except Exception as e:
        logging.error(f"Failed to move {missing_KFRE_file}: {e}")

    # CKD stage and ACR grade codes for EMIS grouping (as in original)
    def get_ckd_stage_acr_group(row):
        eGFR = row['eGFR']
        ACR = row['ACR']

        if eGFR >= 90:
            if ACR < 3:
                return "Normal Function"
            elif ACR <= 30:
                return "Stage 1 A2"
            else:
                return "Stage 1 A3"
        elif eGFR >= 60:
            if ACR < 3:
                return "Normal Function"
            elif ACR <= 30:
                return "Stage 2 A2"
            else:
                return "Stage 2 A3"
        elif eGFR >= 45:
            if ACR < 3:
                return "Stage 3A A1"
            elif ACR <= 30:
                return "Stage 3A A2"
            else:
                return "Stage 3A A3"
        elif eGFR >= 30:
            if ACR < 3:
                return "Stage 3B A1"
            elif ACR <= 30:
                return "Stage 3B A2"
            else:
                return "Stage 3B A3"
        elif eGFR >= 15:
            if ACR < 3:
                return "Stage 4 A1"
            elif ACR <= 30:
                return "Stage 4 A2"
            else:
                return "Stage 4 A3"
        elif 0 < eGFR < 15:
            if ACR < 3:
                return "Stage 5 A1"
            elif ACR <= 30:
                return "Stage 5 A2"
            else:
                return "Stage 5 A3"
        else:
            return "No Data"

    # Apply the function to categorize patients
    CKD_review['CKD_Group'] = CKD_review.apply(get_ckd_stage_acr_group, axis=1)

    # Save each CKD group to a separate CSV for EMIS batch uploads
    emis_clinical_code_dir = os.path.join(current_dir, "EMIS_Clinical_Code_Batch_Files")
    os.makedirs(emis_clinical_code_dir, exist_ok=True)

    # Generate batch files for each group
    ckd_groups = CKD_review['CKD_Group'].unique()

    for group in ckd_groups:
        # Filter patients in the current group
        filtered_patients = CKD_review[CKD_review['CKD_Group'] == group][["HC_Number"]].copy()
        filtered_patients.rename(columns={'HC_Number': 'HCN'}, inplace=True)

        # Generate the file path
        group_file_name = f"CKD_{group.replace(' ', '_').replace('-', '_')}_Patients.txt"
        group_file_path = os.path.join(emis_clinical_code_dir, group_file_name)
        
        # Save the batch file
        filtered_patients.to_csv(group_file_path, index=False, sep='\t', header=False)
        logging.info(f"Saved {group} patients to: {group_file_path}")

    # Save output to another CSV (as in original)
    output_file_name2 = f"data_check_{pd.Timestamp.today().date()}.csv"
    CKD_review.to_csv(output_file_name2, index=False)
    logging.info(f"Saved output to {output_file_name2}")

    # Function to rename folders (as in original)
    def rename_folders(date_folder):
        folder_mapping = {
            "Review_Required__CKD_Stage_1_2_with__1_year_since_last_eGFR_or_ACR__3_": "Stages_1-2_(12_Months_Review)",
            "No_immediate_review_required": "No_Immediate_Review",
            "Review_Required__CKD_Stage_3_5_with__6_months_since_last_eGFR__ACR__30__or_high_risk_": "Stages_3-5_(6_Months_Review)",
            "Review_Required__CKD_Stage_3_5_with__3_months_since_last_eGFR": "Stages_3-5_(3_Months_Review)",
            "Normal_Renal_Function": "Normal_Renal_Function",
            "Review_Required__eGFR_date_unavailable_": "Review_eGFR_Date_Unavailable"
        }
        
        if not os.path.isdir(date_folder):
            logging.warning(f"Date folder not found: {date_folder}")
            return
        
        existing_folders = os.listdir(date_folder)
        
        for original_name, new_name in folder_mapping.items():
            for folder in existing_folders:
                if original_name in folder:
                    original_path = os.path.join(date_folder, folder)
                    new_path = os.path.join(date_folder, new_name)
                    try:
                        os.rename(original_path, new_path)
                        logging.info(f"Renamed folder '{folder}' to '{new_name}'")
                    except Exception as e:
                        logging.error(f"Failed to rename folder '{folder}' to '{new_name}': {e}")

    # Function to delete specific CKD files after moving
    def delete_ckd_files(date_folder):
        files_to_delete = [
            os.path.join(date_folder, f"eGFR_check_{pd.Timestamp.today().date()}.csv"),
            os.path.join(date_folder, "CKD_review.csv")
        ]

        for file_path in files_to_delete:
            try:
                if os.path.exists(file_path):
                    os.remove(file_path)
                    logging.info(f"Deleted {file_path}")
                else:
                    logging.warning(f"File not found for deletion: {file_path}")
            except Exception as e:
                logging.error(f"Error deleting {file_path}: {e}")

    # Run the functions in sequence
    rename_folders(date_folder)
    move_ckd_files(date_folder)
    delete_ckd_files(date_folder)

    logging.info("\nCKD Analysis and Reporting Completed ")
    logging.info(f"All reports and data saved in the folder: {date_folder}")
    logging.info("Please review missing file alerts above if applicable.\n")